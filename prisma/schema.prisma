generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model simplified for Clerk
model User {
  id     String  @id // Corresponds to Clerk User ID
  email  String? @unique
  name   String?
  image  String?
  stores Store[]
}

// Store model remains the same
model Store {
  id          String     @id @default(cuid())
  userId      String
  shop        String     @unique
  accessToken String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers   Customer[]
  orders      Order[]
  products    Product[]
}

// Customer model remains the same
model Customer {
  id        String   @id @default(cuid())
  email     String?
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  shopifyId String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@unique([shopifyId, storeId])
  @@map("customers")
}

// Product model remains the same
model Product {
  id         String      @id @default(cuid())
  title      String
  price      Decimal?    @db.Decimal(10, 2)
  storeId    String
  shopifyId  String
  orderItems OrderItem[]
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([shopifyId, storeId])
  @@map("products")
}

// Order model remains the same
model Order {
  id                String      @id @default(cuid())
  orderNumber       String?
  totalPrice        Decimal     @db.Decimal(10, 2)
  currency          String      @default("USD")
  financialStatus   String?
  fulfillmentStatus String?
  processedAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  customerId        String?
  storeId           String
  shopifyId         String
  orderItems        OrderItem[]
  customer          Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull) // CORRECTED: onDelete
  store             Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([shopifyId, storeId])
  @@map("orders")
}

// OrderItem model remains the same
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  title     String
  orderId   String
  productId String?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull) // CORRECTED: onDelete

  @@map("order_items")
}

